const { readFileSync, writeFileSync, copyFile } = require('fs');
const { execSync } = require('child_process');

const validEnvList = ['dev', 'qa', 'uat', 'prod', 'test'];
const [defaultEnv] = validEnvList;
const env = (() => {
  const processEnv = process.argv[2];
  if (!validEnvList.includes(processEnv)) {
    console.warn(
      `The environment parameter is required. Expected one of ${validEnvList.join(
        ', '
      )}. Received "${processEnv}" instead. Setting it to "${defaultEnv}" by default.`
    );
    return defaultEnv;
  }
  return processEnv;
})();

const branchName = execSync('git rev-parse --abbrev-ref HEAD').toString().trim();
const envFile = readFileSync(`./envs/.env.${env}`).toString().replace('[[BUILD_SCRIPT:BRANCH_NAME]]', branchName);
copyFile(`./envs/GoogleService-Info.plist.${env}`, './ios/GoogleService-Info.plist', err =>
  err ? console.error('Error Found: ', err) : console.log(`Google Service set to "${env}".`)
);

writeFileSync('.env', envFile);

writeFileSync(
  './src/views/DevTools/index.ts',
  (() => {
    switch (env) {
      case 'prod':
        return `const FakeDevTools = () => null;
export { FakeDevTools as DevTools };`;

      case 'dev':
      case 'qa':
      case 'uat':
      default:
        return `/** this file is generated by the "scripts/set-env.js" file. If changes are needed, change them there since here they will be overwritten */
export { default as DevTools } from './DevTools';
`;
    }
  })()
);
